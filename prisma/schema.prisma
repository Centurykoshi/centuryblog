generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Post {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  slug        String     @unique
  title       String
  excerpt     String? // Short description for SEO and previews
  contentJSON Json // TipTap editor content
  contentHTML String     @db.Text // Rendered HTML for display
  featuredImg String?
  status      PostStatus @default(DRAFT)
  published   DateTime?

  // SEO fields
  metaTitle       String?
  metaDescription String?

  // Analytics
  viewCount   Int @default(0)
  readingTime Int @default(0) // in minutes

  // Author relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  tags     PostTag[]
  comments Comment[]

  // Indexes for performance
  @@index([status])
  @@index([published])
  @@index([userId])
  @@index([slug])
  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String? // Hex color for tag styling
  createdAt   DateTime  @default(now())
  posts       PostTag[]

  @@index([name])
}

model PostTag {
  postID String
  tagID  String

  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagID], references: [id], onDelete: Cascade)

  @@id([postID, tagID])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String @db.Text
  // approved Boolean @default(false) // Moderation

  // Relations
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Threading support (replies to comments)
  // parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  // parentId String?
  // replies  Comment[] @relation("CommentReplies")
  // @@index([approved])

  @@index([postId])
  @@index([userId])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name             String
  email            String    @unique
  emailVerified    Boolean
  image            String?
  age              Int?
  gender           String?
  profileCompleted Boolean   @default(false)
  role             UserRole  @default(USER)
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
  Media    Media[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Media {
  id           String   @id @default(cuid())
  url          String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
